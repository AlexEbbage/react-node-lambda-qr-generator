{"version":3,"sources":["components/WifiSettingsForm.jsx","components/QRCode.jsx","App.js","serviceWorker.js","index.js"],"names":["WifiSettingsForm","props","useState","type","setType","SSID","setSSID","password","setPassword","hidden","setHidden","messageClass","isError","className","defaultValue","onChange","e","target","value","placeholder","resultMessage","onClick","submitSettings","QRCode","qr","href","download","title","src","alt","App","qrCode","setQrCode","setResultMessage","setIsError","ssid","isHidden","a","fetch","method","body","JSON","stringify","response","text","responseString","ok","console","error","status","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.dc86dcfa.chunk.js","sourcesContent":["import React, {useState} from \"react\";\n\nconst WifiSettingsForm = (props) => {\n    const [type, setType] = useState(\"WPA/WPA2\");\n    const [SSID, setSSID] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [hidden, setHidden] = useState(false);\n    \n    let messageClass = props.isError ? \"message-container error\" : \"message-container success\";\n\n\n\n    return (\n        <div className=\"form-container\">\n            <div className=\"form\">\n                <div className=\"option\">\n                    <div className=\"label\">Encryption</div>\n                    <div className=\"data\">\n                        <select defaultValue={type} onChange={e => setType(e.target.value)}>\n                            <option>WPA/WPA2</option>\n                            <option>WEP</option>\n                            <option>None</option>\n                        </select>\n                    </div>\n                </div>\n                <div className=\"option\">\n                    <div className=\"label\">Network Name<span className=\"required\">*</span></div>\n                    <div className=\"data\">\n                        <input type=\"text\" placeholder=\"SSID\" onChange={e => setSSID(e.target.value)}/>\n                    </div>\n                </div>\n                <div className=\"option\">\n                    <div className=\"label\">Password{type !== 'None' && (<span className=\"required\">*</span>)}</div>\n                    <div className=\"data\">\n                        <input type=\"text\" placeholder=\"Password\" onChange={e => setPassword(e.target.value)}/>\n                    </div>\n                </div>\n                <div className=\"option\">\n                    <div className=\"label\">Hidden Network</div>\n                    <div className=\"data\">\n                        <input type=\"checkbox\" onChange={e => setHidden(e.target.value)}/>\n                    </div>\n                </div>\n            </div>\n            {props.resultMessage !== \"\" \n                ?<div className={messageClass}>{props.resultMessage}</div>\n                :<div className=\"message-container\">Fields marked with a <span className=\"required\">*</span> are required.</div>\n            }\n            <div className=\"button-container\">\n                <button type=\"button\" onClick={() => props.submitSettings(type, SSID, password, hidden)}>Generate Code</button>\n            </div>\n        </div>\n    );\n};\n\nexport default WifiSettingsForm;","import React from \"react\";\n\nconst QRCode = ({qr}) => {\n    return (\n        <div className=\"qr-container\">\n            <a href={qr} download=\"qr-code.png\" title=\"Click to download the QR code\">\n                <img src={qr} alt=\"Generated QR Code\"/>\n            </a>\n        </div>\n    );\n};\n\nexport default QRCode;","import React, { useState } from 'react';\nimport './App.css';\n\nimport WifiSettingsForm from \"./components/WifiSettingsForm\";\nimport QRCode from './components/QRCode';\n\nfunction App() {\n    const [qrCode, setQrCode] = useState(\"\");\n    const [resultMessage, setResultMessage] = useState(\"\");\n    const [isError, setIsError] = useState(false);\n\n    const generateCodeUrl = \"https://imi4ns5dpb.execute-api.eu-west-1.amazonaws.com/prod/qr-generator/generateCode\";\n\n    const submitSettings = async (type, ssid, password, isHidden) => {\n        try {\n            setResultMessage(\"\");\n            setIsError(false);\n\n            const response = await fetch(generateCodeUrl, {\n                method: \"POST\",\n                body: JSON.stringify({\n                    type: type,\n                    SSID: ssid,\n                    password: password,\n                    hidden: isHidden\n                })\n            });\n\n            let responseString = await response.text();\n\n            if (response.ok) {\n                setQrCode(responseString);\n                setResultMessage(\"QR code successfully generated!\")\n            }\n            else {\n                console.error(`Error ${response.status}. ${responseString}`, response);\n                setResultMessage(\"Error occurred when generating QR code!\");\n                setIsError(true);\n            }\n        }\n        catch (e) {\n            console.error(e);\n            setResultMessage(\"Error occurred when generating QR code!\");\n            setIsError(true);\n        }\n    };\n\n    return (\n        <div className=\"container\">\n            <div className=\"title-container\">\n                <div className=\"title\">WiFi Code QR Generator</div>\n                <div className=\"description\">Fill in the form with the details of the WiFi network you want the QR code to be associated with, then select 'Generate Code' to get your QR code image.</div>\n            </div>\n            {qrCode !== \"\" &&\n                <QRCode qr={qrCode} />\n            }\n            <WifiSettingsForm submitSettings={submitSettings} resultMessage={resultMessage} isError={isError}/>\n            <div className=\"footer\">\n                Made by <a href=\"https://github.com/werzl\" target=\"_blank\" rel=\"noopener noreferrer\" title=\"Vist Adam's GitHub page\">Adam Hewitt</a> and <a href=\"https://github.com/AlexEbbage\" target=\"_blank\" rel=\"noopener noreferrer\" title=\"Vist Alex's GitHub page\">Alex Ebbage</a>. Visit the repository <a href=\"https://github.com/AlexEbbage/react-node-lambda-qr-generator\" title=\"Vist the project's repository\">here</a>.\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}