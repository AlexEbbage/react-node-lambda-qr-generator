{"version":3,"sources":["components/WifiSettingsForm.jsx","components/QRCode.jsx","App.js","serviceWorker.js","index.js"],"names":["WifiSettingsForm","props","useState","type","setType","SSID","setSSID","password","setPassword","hidden","setHidden","defaultValue","onChange","e","target","value","placeholder","onClick","submitSettings","QRCode","qr","src","alt","App","qrCode","setQrCode","ssid","isHidden","a","fetch","method","body","JSON","stringify","response","text","responseString","ok","console","error","status","className","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"kRA2BeA,G,MAzBU,SAACC,GAAW,IAAD,EACRC,mBAAS,YADD,mBACzBC,EADyB,KACnBC,EADmB,OAERF,mBAAS,IAFD,mBAEzBG,EAFyB,KAEnBC,EAFmB,OAGAJ,mBAAS,IAHT,mBAGzBK,EAHyB,KAGfC,EAHe,OAIJN,oBAAS,GAJL,mBAIzBO,EAJyB,KAIjBC,EAJiB,KAMhC,OACI,6BACI,4BAAQC,aAAcR,EAAMS,SAAU,SAAAC,GAAC,OAAIT,EAAQS,EAAEC,OAAOC,SACxD,4CACA,uCACA,yCAGJ,2BAAOZ,KAAK,OAAOa,YAAY,OAAOJ,SAAU,SAAAC,GAAC,OAAIP,EAAQO,EAAEC,OAAOC,UAEtE,2BAAOZ,KAAK,OAAOa,YAAY,WAAWJ,SAAU,SAAAC,GAAC,OAAIL,EAAYK,EAAEC,OAAOC,UAE9E,wCAAa,2BAAOZ,KAAK,WAAWS,SAAU,SAAAC,GAAC,OAAIH,EAAUG,EAAEC,OAAOC,WAEtE,4BAAQZ,KAAK,SAASc,QAAS,kBAAMhB,EAAMiB,eAAef,EAAME,EAAME,EAAUE,KAAhF,aCdGU,EANA,SAAC,GAAU,IAATC,EAAQ,EAARA,GACb,OACI,yBAAKC,IAAKD,EAAIE,IAAI,wBC2DXC,MAzDf,WAAgB,IAAD,EACiBrB,mBAAS,IAD1B,mBACJsB,EADI,KACIC,EADJ,KAKLP,EAAc,uCAAG,WAAOf,EAAMuB,EAAMnB,EAAUoB,GAA7B,iBAAAC,EAAA,+EAEQC,MAJP,wFAI8B,CAC1CC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACjB9B,KAAMA,EACNE,KAAMqB,EACNnB,SAAUA,EACVE,OAAQkB,MARD,cAETO,EAFS,gBAYYA,EAASC,OAZrB,OAYXC,EAZW,OAcXF,EAASG,GACTZ,EAAUW,GAGVE,QAAQC,MAAR,gBAAuBL,EAASM,OAAhC,aAA2CJ,IAlBhC,kDAsBfE,QAAQC,MAAR,MAtBe,0DAAH,4DA0BpB,OACI,yBAAKE,UAAU,OACX,4BAAQA,UAAU,cACF,KAAXjB,GACG,kBAAC,EAAD,CAAQJ,GAAII,IAGhB,kBAAC,EAAD,CAAkBN,eAAgBA,IAClC,6DACmC,uBAAGwB,KAAK,+DACnC5B,OAAO,SAAS6B,IAAI,uBADO,WAKnC,uBACIF,UAAU,WACVC,KAAK,sBACL5B,OAAO,SACP6B,IAAI,uBAJR,kBCvCIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAArB,GACLD,QAAQC,MAAMA,EAAMsB,a","file":"static/js/main.f544b6c4.chunk.js","sourcesContent":["import React, {useState} from \"react\";\n\nconst WifiSettingsForm = (props) => {\n    const [type, setType] = useState(\"WPA/WPA2\");\n    const [SSID, setSSID] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [hidden, setHidden] = useState(false);\n\n    return (\n        <div>\n            <select defaultValue={type} onChange={e => setType(e.target.value)}>\n                <option>WPA/WPA2</option>\n                <option>WEP</option>\n                <option>None</option>\n            </select>\n\n            <input type=\"text\" placeholder=\"SSID\" onChange={e => setSSID(e.target.value)}/>\n\n            <input type=\"text\" placeholder=\"Password\" onChange={e => setPassword(e.target.value)}/>\n\n            <span>Hidden <input type=\"checkbox\" onChange={e => setHidden(e.target.value)}/></span>\n\n            <button type=\"button\" onClick={() => props.submitSettings(type, SSID, password, hidden)}>Submit</button>\n        </div>\n    );\n};\n\nexport default WifiSettingsForm;","import React from \"react\";\n\nconst QRCode = ({qr}) => {\n    return (\n        <img src={qr} alt=\"Generated QR Code.\"/>\n    );\n};\n\nexport default QRCode;","import React, { useState } from 'react';\nimport './App.css';\n\nimport WifiSettingsForm from \"./components/WifiSettingsForm\";\nimport QRCode from './components/QRCode';\n\nfunction App() {\n    const [qrCode, setQrCode] = useState(\"\");\n\n    const generateCodeUrl = \"https://imi4ns5dpb.execute-api.eu-west-1.amazonaws.com/prod/qr-generator/generateCode\";\n\n    const submitSettings = async (type, ssid, password, isHidden) => {\n        try {\n            const response = await fetch(generateCodeUrl, {\n                method: \"POST\",\n                body: JSON.stringify({\n                    type: type,\n                    SSID: ssid,\n                    password: password,\n                    hidden: isHidden\n                })\n            });\n\n            let responseString = await response.text();\n\n            if (response.ok) {\n                setQrCode(responseString);\n            }\n            else {\n                console.error(`Error ${response.status}. ${responseString}`);\n            }\n        }\n        catch (e) {\n            console.error(e);\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                {qrCode !== \"\" &&\n                    <QRCode qr={qrCode} />\n                }\n\n                <WifiSettingsForm submitSettings={submitSettings} />\n                <p>\n                    react-node-lambda-qr-generator <a href=\"https://github.com/AlexEbbage/react-node-lambda-qr-generator\"\n                        target=\"_blank\" rel=\"noopener noreferrer\">\n                        GitHub\n          </a>\n                </p>\n                <a\n                    className=\"App-link\"\n                    href=\"https://reactjs.org\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\">\n                    Learn React\n        </a>\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}